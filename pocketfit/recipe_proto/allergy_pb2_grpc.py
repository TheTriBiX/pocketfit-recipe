# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from recipe_proto import allergy_pb2 as recipe__proto_dot_allergy__pb2

GRPC_GENERATED_VERSION = '1.64.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in recipe_proto/allergy_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class AllergyControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/allergy.AllergyController/List',
                request_serializer=recipe__proto_dot_allergy__pb2.AllergyListRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.AllergyListResponse.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/allergy.AllergyController/Create',
                request_serializer=recipe__proto_dot_allergy__pb2.AllergyCreateRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.AllergyCreateResponse.FromString,
                _registered_method=True)
        self.Retrieve = channel.unary_unary(
                '/allergy.AllergyController/Retrieve',
                request_serializer=recipe__proto_dot_allergy__pb2.AllergyRetrieveRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.AllergyRetrieveResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/allergy.AllergyController/Update',
                request_serializer=recipe__proto_dot_allergy__pb2.AllergyUpdateRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.AllergyUpdateResponse.FromString,
                _registered_method=True)
        self.Destroy = channel.unary_unary(
                '/allergy.AllergyController/Destroy',
                request_serializer=recipe__proto_dot_allergy__pb2.AllergyDestroyRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.AllergyDestroyResponse.FromString,
                _registered_method=True)


class AllergyControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AllergyControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=recipe__proto_dot_allergy__pb2.AllergyListRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.AllergyListResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=recipe__proto_dot_allergy__pb2.AllergyCreateRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.AllergyCreateResponse.SerializeToString,
            ),
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=recipe__proto_dot_allergy__pb2.AllergyRetrieveRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.AllergyRetrieveResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=recipe__proto_dot_allergy__pb2.AllergyUpdateRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.AllergyUpdateResponse.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=recipe__proto_dot_allergy__pb2.AllergyDestroyRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.AllergyDestroyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allergy.AllergyController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allergy.AllergyController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AllergyController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.AllergyController/List',
            recipe__proto_dot_allergy__pb2.AllergyListRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.AllergyListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.AllergyController/Create',
            recipe__proto_dot_allergy__pb2.AllergyCreateRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.AllergyCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.AllergyController/Retrieve',
            recipe__proto_dot_allergy__pb2.AllergyRetrieveRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.AllergyRetrieveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.AllergyController/Update',
            recipe__proto_dot_allergy__pb2.AllergyUpdateRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.AllergyUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.AllergyController/Destroy',
            recipe__proto_dot_allergy__pb2.AllergyDestroyRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.AllergyDestroyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UserAllergyControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/allergy.UserAllergyController/List',
                request_serializer=recipe__proto_dot_allergy__pb2.ListUserAllergyRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.ListUserAllergyResponse.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/allergy.UserAllergyController/Create',
                request_serializer=recipe__proto_dot_allergy__pb2.CreateUserAllergyRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.CreateUserAllergyResponse.FromString,
                _registered_method=True)
        self.Destroy = channel.unary_unary(
                '/allergy.UserAllergyController/Destroy',
                request_serializer=recipe__proto_dot_allergy__pb2.DestroyUserAllergyRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.DestroyUserAllergyResponse.FromString,
                _registered_method=True)


class UserAllergyControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserAllergyControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=recipe__proto_dot_allergy__pb2.ListUserAllergyRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.ListUserAllergyResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=recipe__proto_dot_allergy__pb2.CreateUserAllergyRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.CreateUserAllergyResponse.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=recipe__proto_dot_allergy__pb2.DestroyUserAllergyRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.DestroyUserAllergyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allergy.UserAllergyController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allergy.UserAllergyController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserAllergyController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.UserAllergyController/List',
            recipe__proto_dot_allergy__pb2.ListUserAllergyRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.ListUserAllergyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.UserAllergyController/Create',
            recipe__proto_dot_allergy__pb2.CreateUserAllergyRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.CreateUserAllergyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.UserAllergyController/Destroy',
            recipe__proto_dot_allergy__pb2.DestroyUserAllergyRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.DestroyUserAllergyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class IngredientControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/allergy.IngredientController/List',
                request_serializer=recipe__proto_dot_allergy__pb2.IngredientListRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.IngredientListResponse.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/allergy.IngredientController/Create',
                request_serializer=recipe__proto_dot_allergy__pb2.IngredientCreateRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.IngredientCreateResponse.FromString,
                _registered_method=True)
        self.Retrieve = channel.unary_unary(
                '/allergy.IngredientController/Retrieve',
                request_serializer=recipe__proto_dot_allergy__pb2.IngredientRetrieveRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.IngredientRetrieveResponse.FromString,
                _registered_method=True)
        self.Destroy = channel.unary_unary(
                '/allergy.IngredientController/Destroy',
                request_serializer=recipe__proto_dot_allergy__pb2.IngredientDestroyRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.IngredientDestroyResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/allergy.IngredientController/Update',
                request_serializer=recipe__proto_dot_allergy__pb2.IngredientUpdateRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.IngredientUpdateResponse.FromString,
                _registered_method=True)
        self.AddAllergy = channel.unary_unary(
                '/allergy.IngredientController/AddAllergy',
                request_serializer=recipe__proto_dot_allergy__pb2.IngredientAddAllergyRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.IngredientAddAllergyResponse.FromString,
                _registered_method=True)
        self.DestroyAllergy = channel.unary_unary(
                '/allergy.IngredientController/DestroyAllergy',
                request_serializer=recipe__proto_dot_allergy__pb2.IngredientDestroyAllergyRequest.SerializeToString,
                response_deserializer=recipe__proto_dot_allergy__pb2.IngredientDestroyAllergyResponse.FromString,
                _registered_method=True)


class IngredientControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAllergy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyAllergy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IngredientControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=recipe__proto_dot_allergy__pb2.IngredientListRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.IngredientListResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=recipe__proto_dot_allergy__pb2.IngredientCreateRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.IngredientCreateResponse.SerializeToString,
            ),
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=recipe__proto_dot_allergy__pb2.IngredientRetrieveRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.IngredientRetrieveResponse.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=recipe__proto_dot_allergy__pb2.IngredientDestroyRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.IngredientDestroyResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=recipe__proto_dot_allergy__pb2.IngredientUpdateRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.IngredientUpdateResponse.SerializeToString,
            ),
            'AddAllergy': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAllergy,
                    request_deserializer=recipe__proto_dot_allergy__pb2.IngredientAddAllergyRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.IngredientAddAllergyResponse.SerializeToString,
            ),
            'DestroyAllergy': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyAllergy,
                    request_deserializer=recipe__proto_dot_allergy__pb2.IngredientDestroyAllergyRequest.FromString,
                    response_serializer=recipe__proto_dot_allergy__pb2.IngredientDestroyAllergyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allergy.IngredientController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allergy.IngredientController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IngredientController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.IngredientController/List',
            recipe__proto_dot_allergy__pb2.IngredientListRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.IngredientListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.IngredientController/Create',
            recipe__proto_dot_allergy__pb2.IngredientCreateRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.IngredientCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.IngredientController/Retrieve',
            recipe__proto_dot_allergy__pb2.IngredientRetrieveRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.IngredientRetrieveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.IngredientController/Destroy',
            recipe__proto_dot_allergy__pb2.IngredientDestroyRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.IngredientDestroyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.IngredientController/Update',
            recipe__proto_dot_allergy__pb2.IngredientUpdateRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.IngredientUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddAllergy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.IngredientController/AddAllergy',
            recipe__proto_dot_allergy__pb2.IngredientAddAllergyRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.IngredientAddAllergyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DestroyAllergy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allergy.IngredientController/DestroyAllergy',
            recipe__proto_dot_allergy__pb2.IngredientDestroyAllergyRequest.SerializeToString,
            recipe__proto_dot_allergy__pb2.IngredientDestroyAllergyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
